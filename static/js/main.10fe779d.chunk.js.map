{"version":3,"sources":["SelectFromList.jsx","InterviewSelections.jsx","Interviews.jsx","OfferSummary.jsx","api/jsonFetch.js","App.jsx","index.js"],"names":["SelectFromList","props","label","options","value","onChange","Box","m","InputLabel","htmlFor","Select","id","e","target","map","option","MenuItem","key","SelectInterview","locations","availableTransport","addInterview","location","setLocation","transport","setTransport","useState","locationDistance","setLocationDistance","handleLocationSelect","val","distance","filter","city","calculateDistance","filterTransport","unit","max_distance","name","v","length","Button","type","onClick","variant","color","useStyles","makeStyles","table","minWidth","Interviews","interviews","performInterview","cancelInterView","classes","totals","reduce","total","current","travelHours","TableContainer","component","Paper","Table","className","TableHead","TableRow","TableCell","TableBody","interviewed","OfferSummary","some","jobOffers","interview","offeredJob","style","fontSize","offer","join","transportData","data","locationData","scheduleInterview","locationObj","find","error","status","transportObj","transportOption","speed","push","cancelInterview","cancelLocationName","updatedInterviews","locationToAddBack","newLocationData","requestedInterview","Math","random","getRouter","route","postRouter","body","randomNetworkDelay","min","max","delayMS","floor","jsonFetch","fetchOptions","method","Promise","resolve","reject","setTimeout","returnData","Error","App","loading","setLoading","setInterviews","setTransportData","setLocationData","fetchCurrentData","a","initialDataFetches","then","res","useEffect","newInterview","cancelLocation","interviewLocation","maxWidth","display","loaded","flexShrink","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10fe779d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Box from '@material-ui/core/Box';\n\nexport default function SelectFromList(props) {\n  const { label, options, value, onChange } = props;\n  return (\n    <Box m={4}>\n      <InputLabel htmlFor={label}>{label}</InputLabel>\n      <Select\n        id={label}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      >\n        {options.map((option) => (\n          <MenuItem key={option} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      </Select>\n    </Box>\n  );\n}\n\nSelectFromList.propTypes = {\n  label: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","/* eslint-disable camelcase */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport SelectFromList from './SelectFromList';\n\nexport default function SelectInterview({\n  locations,\n  availableTransport,\n  addInterview,\n  location,\n  setLocation,\n  transport,\n  setTransport,\n}) {\n  const [locationDistance, setLocationDistance] = useState(0);\n\n  function calculateDistance(val) {\n    const selectedLocation = locations.filter(({ city }) => city === val);\n    const { distance } = selectedLocation[0];\n    setLocationDistance(distance);\n  }\n\n  function handleLocationSelect(val) {\n    // when user selects a location, clear transport option to prevent invalid\n    setLocation(val);\n    setTransport('');\n    if (val) calculateDistance(val);\n  }\n\n  function filterTransport(distance) {\n    // returns array of transport options (name strings)\n    // filters out options which have no units left, or whose max_distance is insufficient\n    return availableTransport\n      .filter(({ unit, max_distance }) => {\n        if (!unit) return false;\n        return distance <= max_distance;\n      })\n      .map(({ name }) => name);\n  }\n\n  function submitInterview() {\n    addInterview({\n      location,\n      transport,\n    });\n  }\n\n  return (\n    <Box m={3}>\n      <SelectFromList\n        label=\"Select interview location\"\n        options={locations.map(({ city }) => city)}\n        value={location}\n        onChange={(v) => handleLocationSelect(v)}\n      />\n      {!filterTransport(locationDistance).length && (\n        <div>\n          No valid transport available. Do you wish to re-plan your previous\n          selections?\n        </div>\n      )}\n      {location && (\n        <SelectFromList\n          label=\"Select transport method\"\n          options={filterTransport(locationDistance)}\n          value={transport}\n          onChange={(v) => setTransport(v)}\n        />\n      )}\n      {location && transport && (\n        <Button\n          type=\"button\"\n          onClick={submitInterview}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Confirm Interview\n        </Button>\n      )}\n    </Box>\n  );\n}\n\nSelectInterview.propTypes = {\n  locations: PropTypes.arrayOf(PropTypes.object).isRequired,\n  availableTransport: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addInterview: PropTypes.func.isRequired,\n  location: PropTypes.string.isRequired, // currently selected location\n  setLocation: PropTypes.func.isRequired,\n  transport: PropTypes.string.isRequired, // currently selected transportation name (car)\n  setTransport: PropTypes.func.isRequired,\n};\n","/* eslint-disable react/jsx-curly-newline */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function Interviews({\n  interviews,\n  performInterview,\n  cancelInterView,\n}) {\n  const classes = useStyles();\n  if (interviews.length === 0) {\n    return null;\n  }\n  const totals = interviews.reduce(\n    (total, current) => ({\n      distance: total.distance + current.distance,\n      travelHours: total.travelHours + current.travelHours,\n    }),\n    { distance: 0, travelHours: 0 },\n  );\n\n  return (\n    <section>\n      <h2>Scheduled Interviews</h2>\n      <TableContainer component={Paper}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Location</TableCell>\n              <TableCell>Travel Method</TableCell>\n              <TableCell>Distance</TableCell>\n              <TableCell>Travel Time</TableCell>\n              <TableCell />\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {interviews.map(\n              ({\n                location,\n                distance,\n                transport,\n                travelHours,\n                interviewed,\n                // offeredJob,\n              }) => (\n                <TableRow key={location}>\n                  <TableCell>{location}</TableCell>\n                  <TableCell>{transport}</TableCell>\n                  <TableCell>{distance} mi</TableCell>\n                  <TableCell>{travelHours} hours</TableCell>\n                  <TableCell>\n                    {!interviewed && (\n                      <>\n                        <Button\n                          type=\"button\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => performInterview(location)}\n                        >\n                          Interview\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => cancelInterView(location)}\n                        >\n                          Cancel Interview\n                        </Button>\n                      </>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ),\n            )}\n            <TableRow>\n              <TableCell>Total</TableCell>\n              <TableCell />\n              <TableCell>{totals.distance} mi</TableCell>\n              <TableCell>{totals.travelHours} hours</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </section>\n  );\n}\n\nInterviews.propTypes = {\n  interviews: PropTypes.arrayOf(PropTypes.object).isRequired,\n  performInterview: PropTypes.func.isRequired,\n  cancelInterView: PropTypes.func.isRequired,\n};\n","/* eslint-disable operator-linebreak */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Confetti from 'react-confetti';\n\nconst MAX_INTERVIEWS = 4;\n\nexport default function OfferSummary({ interviews }) {\n  if (!interviews.length) {\n    return null;\n  }\n  const interviewsRemain =\n    interviews.length < MAX_INTERVIEWS ||\n    interviews.some(({ interviewed }) => !interviewed);\n  if (interviewsRemain) return null;\n  const jobOffers = interviews.filter((interview) => interview.offeredJob);\n  if (jobOffers.length) {\n    return (\n      <Box m={4}>\n        <h3>\n          Job Offer\n          {jobOffers.length > 1 ? 's' : ''}\n        </h3>\n        <p style={{ fontSize: '3rem' }}>\n          {jobOffers.map((offer) => offer.location).join(', ')}\n        </p>\n        <Confetti />\n      </Box>\n    );\n  }\n  return <h3>No offers this round, better luck next time.</h3>;\n}\n\nOfferSummary.propTypes = {\n  interviews: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","// To mock API responses, all calls will be made here instead.\n// Could be kept as a fetch middleware to return straight JSON also.\n\nimport data from '../data.json';\n// max_distance is in miles\n// speed is in miles per hour\n\nconst MAX_INTERVIEWS = 4;\nconst MIN_SCORE_TO_LAND_JOB = 0.67;\n\nlet { transportData } = data;\nlet { locationData } = data;\nlet interviews = [];\n\nfunction scheduleInterview({ location, transport }) {\n  // mutates all arrays: transportData, locationData, and interviews\n  // Ensure location is still available:\n  const locationObj = locationData.find((option) => option.city === location);\n  if (!locationObj) {\n    return {\n      error: 'Location not available',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  // Ensure we haven't used up transport option:\n  const transportObj = transportData.find(\n    (option) => option.name === transport,\n  );\n  if (!transportObj || transportObj.unit < 1) {\n    return {\n      error: 'Transport option not available',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  // Ensure we haven't scheduled the max number of interviews yet:\n  if (interviews.length >= MAX_INTERVIEWS) {\n    return {\n      error: 'Max number of interviews exceeded',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  // Ensure location doesn't exceed limit of transport method:\n  const { distance } = locationObj;\n  const { max_distance: maxDistance } = transportObj;\n  if (distance > maxDistance) {\n    return {\n      error: 'Location not reachable by selected transport option',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  // remove location from array:\n  locationData = locationData.filter((option) => option.city !== location);\n\n  // update units for transport:\n  transportData = [...transportData].map((transportOption) => {\n    if (transportOption.name !== transport) return transportOption;\n    return { ...transportOption, unit: transportOption.unit - 1 };\n  });\n  // .filter((option) => option.unit > 0);\n\n  // update interview list:\n  const { speed } = transportObj;\n  const travelHours = distance / speed;\n  interviews.push({\n    location,\n    distance,\n    transport,\n    travelHours,\n    interviewed: false,\n    offeredJob: false,\n  });\n  return {\n    status: 200,\n    data: interviews,\n  };\n}\n\nfunction checkForJobOffer() {\n  return Math.random() > MIN_SCORE_TO_LAND_JOB;\n}\n\nfunction cancelInterview({ location: cancelLocationName }) {\n  // const interviewToCancel = interviews.find(\n  //   (interview) => interview.location === cancelLocationName,\n  // );\n  const updatedInterviews = interviews.filter(\n    (interview) => interview.location !== cancelLocationName,\n  );\n  interviews = [...updatedInterviews];\n  transportData.map((transport) => {\n    if (transport.name !== cancelLocationName) return transport;\n    return { ...transport, unit: transport.unit + 1 };\n  });\n\n  const locationToAddBack = data.locationData.find(\n    ({ city }) => city === cancelLocationName,\n  );\n\n  const newLocationData = [...locationData];\n  newLocationData.push(locationToAddBack);\n  locationData = [...newLocationData];\n\n  return {\n    status: 200,\n    data: interviews,\n  };\n}\n\nfunction performInterview({ location }) {\n  // Ensure interview is scheduled;\n  const requestedInterview = interviews.find(\n    (option) => option.location === location,\n  );\n  if (!requestedInterview) {\n    return {\n      error: 'Interview was not scheduled',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  if (requestedInterview.interviewed) {\n    return {\n      error: 'Already interviewed for this job',\n      status: 400,\n      data: interviews,\n    };\n  }\n\n  const updatedInterviews = [...interviews].map((interview) => {\n    if (interview !== requestedInterview) return interview;\n    return { ...interview, interviewed: true, offeredJob: checkForJobOffer() };\n  });\n\n  interviews = updatedInterviews;\n  return {\n    status: 200,\n    data: updatedInterviews,\n  };\n}\n\nfunction getRouter(route) {\n  switch (route) {\n    case '/api/transportation':\n      return transportData;\n    case '/api/locations':\n      return locationData;\n    default:\n      return {\n        error: 'Get route not found',\n        status: 404,\n      };\n  }\n}\n\nfunction postRouter(route, body = {}) {\n  switch (route) {\n    case '/api/schedule_interview':\n      return scheduleInterview(body);\n    case '/api/cancel_interview':\n      return cancelInterview(body);\n    case '/api/perform_interview':\n      return performInterview(body);\n    default:\n      return {\n        error: 'Post route not found',\n        status: 404,\n      };\n  }\n}\n\nfunction randomNetworkDelay(min = 350, max = 550) {\n  // To simulate a network delay\n  const delayMS = Math.floor(Math.random() * (max - min)) + min;\n  return delayMS;\n}\n\nexport default function jsonFetch(route, fetchOptions = {}) {\n  const options = {\n    // set up defaults, then spread in user-passed config\n    method: 'GET',\n    ...fetchOptions,\n  };\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (options.method === 'GET') {\n        const returnData = getRouter(route);\n        return resolve(returnData);\n      }\n      if (options.method === 'POST') {\n        const returnData = postRouter(route, options.body);\n        return resolve(returnData);\n      }\n      return reject(new Error('Unknown route requested or server error.'));\n    }, randomNetworkDelay());\n  });\n}\n","/* eslint-disable operator-linebreak */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport Loader from 'react-loader';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\nimport InterviewSelections from './InterviewSelections';\nimport Interviews from './Interviews';\nimport OfferSummary from './OfferSummary';\nimport jsonFetch from './api/jsonFetch';\n\nconst MAX_INTERVIEWS = 4;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [interviews, setInterviews] = useState([]);\n  const [transportData, setTransportData] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [location, setLocation] = useState('');\n  const [transport, setTransport] = useState('');\n\n  const fetchCurrentData = async () => {\n    const initialDataFetches = [\n      jsonFetch('/api/transportation').then((res) => setTransportData(res)),\n      jsonFetch('/api/locations').then((res) => setLocationData(res)),\n    ];\n    await initialDataFetches;\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchCurrentData();\n  }, []);\n\n  const addInterview = async (newInterview) => {\n    setLoading(true);\n    setLocation('');\n    setTransport('');\n    const res = await jsonFetch('/api/schedule_interview', {\n      method: 'POST',\n      body: newInterview,\n    });\n    setInterviews([...res.data]);\n    fetchCurrentData();\n  };\n\n  const cancelInterView = async (cancelLocation) => {\n    setLoading(true);\n    const res = await jsonFetch('/api/cancel_interview', {\n      method: 'POST',\n      body: { location: cancelLocation },\n    });\n    setInterviews([...res.data]);\n    fetchCurrentData();\n  };\n\n  const performInterview = async (interviewLocation) => {\n    setLoading(true);\n    const res = await jsonFetch('/api/perform_interview', {\n      method: 'POST',\n      body: { location: interviewLocation },\n    });\n    setInterviews([...res.data]);\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <Box className=\"App\" m={1} maxWidth={680} display=\"flex\">\n        <Box component=\"section\" m={2}>\n          <h1>Interviews Planner</h1>\n          {interviews.length < MAX_INTERVIEWS && (\n            <Box m={3}>\n              <p>\n                Great work lining up 6 interviews! However, you only have the\n                time to attend 4 interviews. Please plan your interviews below.\n                After you interview at all 4 locations, you will receive the\n                results. Good luck.\n              </p>\n            </Box>\n          )}\n          <Loader loaded={!loading}>\n            {interviews.length < MAX_INTERVIEWS && (\n              <InterviewSelections\n                locations={locationData}\n                availableTransport={transportData}\n                addInterview={addInterview}\n                location={location}\n                setLocation={setLocation}\n                transport={transport}\n                setTransport={setTransport}\n              />\n            )}\n          </Loader>\n          <Interviews\n            interviews={interviews}\n            performInterview={performInterview}\n            cancelInterView={cancelInterView}\n          />\n          <OfferSummary interviews={interviews} />\n        </Box>\n      </Box>\n      <div style={{ flexShrink: 0 }}>\n        <p>\n          View{' '}\n          <a href=\"https://github.com/scotteratigan/interviews\">Source Code</a>\n        </p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}